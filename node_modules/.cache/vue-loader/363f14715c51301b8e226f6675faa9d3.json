{"remainingRequest":"/home/projet/sababa/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/projet/sababa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/projet/sababa/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/projet/sababa/src/views/parametrage/gestionTva.vue?vue&type=template&id=4e633096&","dependencies":[{"path":"/home/projet/sababa/src/views/parametrage/gestionTva.vue","mtime":1603100366109},{"path":"/home/projet/sababa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/projet/sababa/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/projet/sababa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/projet/sababa/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}