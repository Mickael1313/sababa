{"remainingRequest":"/home/projet/sababa/projet/sababa/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/projet/sababa/projet/sababa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/projet/sababa/projet/sababa/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/projet/sababa/projet/sababa/src/views/clients/GestionClients.vue?vue&type=template&id=3749ec80&","dependencies":[{"path":"/home/projet/sababa/projet/sababa/src/views/clients/GestionClients.vue","mtime":1597605363585},{"path":"/home/projet/sababa/projet/sababa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/projet/sababa/projet/sababa/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/projet/sababa/projet/sababa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/projet/sababa/projet/sababa/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}