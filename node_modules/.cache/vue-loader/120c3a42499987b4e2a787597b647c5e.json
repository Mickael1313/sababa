{"remainingRequest":"C:\\projet\\sababa\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\projet\\sababa\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\projet\\sababa\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\projet\\sababa\\src\\views\\articles\\produits.vue?vue&type=template&id=09e386d2&","dependencies":[{"path":"C:\\projet\\sababa\\src\\views\\articles\\produits.vue","mtime":1597605363584},{"path":"C:\\projet\\sababa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projet\\sababa\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\projet\\sababa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projet\\sababa\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}