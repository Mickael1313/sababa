{"remainingRequest":"C:\\projet\\sababa\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\projet\\sababa\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\projet\\sababa\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\projet\\sababa\\src\\views\\articles\\FamillesSousArticles.vue?vue&type=template&id=59f1e744&","dependencies":[{"path":"C:\\projet\\sababa\\src\\views\\articles\\FamillesSousArticles.vue","mtime":1588787349357},{"path":"C:\\projet\\sababa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projet\\sababa\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\projet\\sababa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projet\\sababa\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}